from snakemake.io import glob_wildcards, expand

# grab user settings and define variables
configfile: "../config/config.yaml"
workdir: config["outdir"]
#OUTDIR = config["output"]
Q2CONDA = config["q2env"]
PRIMERS = config["primers"]
FORMAT = ["seqs", "tax"]
# Variables below, allow us to contsrain "amplicon extraction"
# to only those file names with variable regions as defined
# in PRIMERS, i.e. ignore '-fl-'
VREGION = list(PRIMERS.keys())
VREGION_CONSTRAINT = "|".join(VREGION)
# append 'fl' to ref_type as we want to write the full-length
# data to it's own folder, along with variable regions to their
# own folder.
REF_TYPE = VREGION + ["fl"]


# All
rule all:
    input:
        "fl/gtdb-fl-seqs.qza",
        "fl/gtdb-fl-tax.qza",
        expand("{ref_type}/gtdb-{ref_type}-seqs.qza", 
               ref_type=REF_TYPE),
        expand("{ref_type}/gtdb-{ref_type}-{format}-derep.qza", 
                ref_type = REF_TYPE, format = FORMAT),
        expand("{ref_type}/gtdb-{ref_type}-classifier.qza", 
               ref_type = REF_TYPE),
        

include:
    "rules/common.smk"

## get GTDB data
rule get_gtdb:
    conda:
        Q2CONDA
    params:
        version = config["gtdb_opt"]["version"],
        domain = config["gtdb_opt"]["domain"],
        db = config["gtdb_opt"]["db"]
    output:
        seqs = "fl/gtdb-fl-seqs.qza",
        tax = "fl/gtdb-fl-tax.qza",
        
    log:
        out = "logs/downloads-log.out",
        err = "logs/downloads-log.err"
    shell:
        """
        qiime rescript get-gtdb-data \
            --p-version {params.version} \
            --p-domain {params.domain} \
            --p-db-type {params.db} \
            --o-gtdb-sequences {output.seqs} \
            --o-gtdb-taxonomy {output.tax} \
            --verbose 2> {log.err} 1> {log.out}
        """

# Extract amplicon regions
rule extract_amplicon_region:
    wildcard_constraints:
        ref_type = VREGION_CONSTRAINT
    conda:
        Q2CONDA
    input:
        seqs = rules.get_gtdb.output.seqs,
    params:
        f_primer = get_fw_primer,
        r_primer = get_rev_primer,
        orientation = "forward",
    threads: 
        2
    output:
        extracted_seqs = "{ref_type}/gtdb-{ref_type}-seqs.qza"
    log:
        out = "logs/extract-amp-{ref_type}-log.out",
        err = "logs/extract-amp-{ref_type}-log.err"
    shell:
        """
        qiime feature-classifier extract-reads \
            --i-sequences {input.seqs} \
            --p-f-primer {params.f_primer} \
            --p-r-primer {params.r_primer} \
            --p-n-jobs {threads} \
            --p-read-orientation {params.orientation} \
            --o-reads {output.extracted_seqs} \
            --verbose 2> {log.err} 1> {log.out}
        """

# derep
rule derep:
    conda:
        Q2CONDA
    input:
        seqs = "{ref_type}/gtdb-{ref_type}-seqs.qza",
	    tax =  "fl/gtdb-fl-tax.qza"
    params:
        mode = 'uniq',
    threads:
        2
    output:
        derep_seqs = "{ref_type}/gtdb-{ref_type}-seqs-derep.qza",
	    derep_tax = "{ref_type}/gtdb-{ref_type}-tax-derep.qza"
    log:
        out = "logs/derep-{ref_type}-log.out",
        err = "logs/derep-{ref_type}-log.err"
    shell:
        """
        qiime rescript dereplicate \
            --i-sequences {input.seqs} \
            --i-taxa {input.tax} \
            --p-mode {params.mode} \
	        --p-threads {threads} \
            --o-dereplicated-sequences {output.derep_seqs} \
            --o-dereplicated-taxa {output.derep_tax} \
            --verbose 2> {log.err} 1> {log.out}
        """

# train
rule fl_train:
    conda:
        Q2CONDA
    input:
        seqs = "{ref_type}/gtdb-{ref_type}-seqs-derep.qza",
        tax = "{ref_type}/gtdb-{ref_type}-tax-derep.qza"
    output:
       classifier = "{ref_type}/gtdb-{ref_type}-classifier.qza"
    log:
        out = "logs/train-classifier-{ref_type}-log.out",
        err = "logs/train-classifier-{ref_type}-log.err"
    shell:
        """
	    qiime feature-classifier fit-classifier-naive-bayes \
            --i-reference-reads {input.seqs} \
            --i-reference-taxonomy {input.tax} \
            --o-classifier {output.classifier} \
            --verbose 2> {log.err} 1> {log.out}
	    """
